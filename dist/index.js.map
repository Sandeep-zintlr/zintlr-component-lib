{"version":3,"sources":["../src/components/Toast.js","../src/components/Counter.js","../src/components/Example.js","../src/helpers/isBrowser.js","../src/helpers/copy_to_clipboard.js"],"names":["ToastWrapper","position","expand","richColors","closeButton","props","React","createElement","Toaster","Counter","initialCount","onCountChange","count","setCount","useState","lastUpdate","setLastUpdate","useEffect","toLocaleTimeString","toast","success","increment","useCallback","prevCount","decrement","reset","promise","resolve","loading","error","className","onClick","Example","isBrowser","copy_to_clipboard","text","type","clipboard","writeText","copy_to_clipboard_default"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport { Toaster, toast } from 'sonner';\n\n// Toast component that provides the Toaster container\nexport const ToastWrapper = ({\n  position = 'bottom-right',\n  expand = false,\n  richColors = true,\n  closeButton = true,\n  ...props\n}) => {\n  return (\n    <Toaster\n      position={position}\n      expand={expand}\n      richColors={richColors}\n      closeButton={closeButton}\n      {...props}\n    />\n  );\n};\n\n// Export toast functions for direct use\nexport { toast };\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { toast } from 'sonner';\n\nexport const Counter = ({ initialCount = 0, onCountChange }) => {\n  const [count, setCount] = useState(initialCount);\n  const [lastUpdate, setLastUpdate] = useState(null);\n\n  // Effect to track last update time\n  useEffect(() => {\n    setLastUpdate(new Date().toLocaleTimeString());\n\n    // Notify parent component if provided\n    if (onCountChange) {\n      onCountChange(count);\n    }\n\n    // Show toast on milestone counts\n    if (count !== 0 && count % 10 === 0) {\n      toast.success(`Milestone reached: ${count}!`);\n    }\n  }, [count, onCountChange]);\n\n  // Memoized increment function\n  const increment = useCallback(() => {\n    setCount((prevCount) => prevCount + 1);\n  }, []);\n\n  // Memoized decrement function\n  const decrement = useCallback(() => {\n    setCount((prevCount) => prevCount - 1);\n  }, []);\n\n  // Reset function with confirmation\n  const reset = useCallback(() => {\n    toast.promise(\n      new Promise((resolve) => {\n        setTimeout(() => {\n          setCount(initialCount);\n          resolve();\n        }, 500);\n      }),\n      {\n        loading: 'Resetting counter...',\n        success: 'Counter reset successfully!',\n        error: 'Failed to reset counter',\n      }\n    );\n  }, [initialCount]);\n\n  return (\n    <div className=\"counter-container\">\n      <h2>Counter: {count}</h2>\n      <p>Last updated: {lastUpdate}</p>\n      <div className=\"counter-buttons\">\n        <button onClick={decrement}>-</button>\n        <button onClick={reset}>Reset</button>\n        <button onClick={increment}>+</button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const Example = () => {\n  return <div>Example Component</div>;\n};\n","/**\n * Checks if the code is running in a browser environment.\n * @returns {boolean} Returns true if the code is running in a browser, otherwise false.\n */\nexport default function isBrowser() {\n  // Check if the 'window' object is defined, indicating that the code is running in a browser environment.\n  return typeof window !== 'undefined';\n}\n","import { toast } from 'sonner';\nimport isBrowser from './isBrowser';\n\n/**\n * This function copies the given text to the clipboard\n * and displays a success toast message if executed in a browser environment.\n * @param {string} text The text to be copied to the clipboard.\n * @param {string} type The type of data being copied (e.g., \"Email\"). Default value is \"Email\".\n * @returns {void} This function does not return anything.\n */\nconst copy_to_clipboard = (text, type = 'Email') => {\n  if (isBrowser()) {\n    navigator.clipboard.writeText(text);\n    toast.success(`${type} copied to clipboard`);\n  }\n};\n\nexport default copy_to_clipboard;\n"]}