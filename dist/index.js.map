{"version":3,"sources":["../src/components/Toast.js","../src/helpers/isBrowser.js","../src/helpers/copy_to_clipboard.js","../src/index.js"],"names":["React","Toaster","toast"],"mappings":";;;;;;;;;;AAIO,IAAM,eAAe,CAAC;AAAA,EAC3B,QAAW,GAAA,cAAA;AAAA,EACX,MAAS,GAAA,KAAA;AAAA,EACT,UAAa,GAAA,IAAA;AAAA,EACb,WAAc,GAAA,IAAA;AAAA,EACd,GAAG;AACL,CAAM,KAAA;AACJ,EACE,uBAAAA,sBAAA,CAAA,aAAA;AAAA,IAACC,cAAA;AAAA,IAAA;AAAA,MACC,QAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAA;AAAA,MACA,WAAA;AAAA,MACC,GAAG;AAAA;AAAA,GACN;AAEJ;;;AChBe,SAAR,SAA6B,GAAA;AAEnC,EAAA,OAAO,OAAO,MAAW,KAAA,WAAA;AAC1B;;;ACGA,IAAM,iBAAoB,GAAA,CAAC,IAAM,EAAA,IAAA,GAAO,OAAY,KAAA;AACnD,EAAA,IAAI,WAAa,EAAA;AAChB,IAAU,SAAA,CAAA,SAAA,CAAU,UAAU,IAAI,CAAA;AAClC,IAAAC,YAAM,CAAA,OAAA,CAAQ,CAAG,EAAA,IAAI,CAAsB,oBAAA,CAAA,CAAA;AAAA;AAE7C,CAAA;AAEA,IAAO,yBAAQ,GAAA;;;ACbR,IAAM,UAAU,MAAM;AAC3B,EAAA,uBAAOF,sBAAAA,CAAA,aAAC,CAAA,KAAA,EAAA,IAAA,EAAI,mBAAiB,CAAA;AAC/B","file":"index.js","sourcesContent":["import React from 'react';\nimport { Toaster, toast } from 'sonner';\n\n// Toast component that provides the Toaster container\nexport const ToastWrapper = ({ \n  position = 'bottom-right',\n  expand = false,\n  richColors = true,\n  closeButton = true,\n  ...props \n}) => {\n  return (\n    <Toaster\n      position={position}\n      expand={expand}\n      richColors={richColors}\n      closeButton={closeButton}\n      {...props}\n    />\n  );\n};\n\n// Export toast functions for direct use\nexport { toast }; ","/**\n * Checks if the code is running in a browser environment.\n * @returns {boolean} Returns true if the code is running in a browser, otherwise false.\n */\nexport default function isBrowser() {\n\t// Check if the 'window' object is defined, indicating that the code is running in a browser environment.\n\treturn typeof window !== \"undefined\";\n}\n","import { toast } from \"sonner\";\nimport isBrowser from \"./isBrowser\";\n\n/**\n * This function copies the given text to the clipboard\n * and displays a success toast message if executed in a browser environment.\n * @param {string} text The text to be copied to the clipboard.\n * @param {string} type The type of data being copied (e.g., \"Email\"). Default value is \"Email\".\n * @returns {void} This function does not return anything.\n */\nconst copy_to_clipboard = (text, type = \"Email\") => {\n\tif (isBrowser()) {\n\t\tnavigator.clipboard.writeText(text);\n\t\ttoast.success(`${type} copied to clipboard`);\n\t}\n};\n\nexport default copy_to_clipboard;\n","import React from 'react';\nexport { ToastWrapper, toast } from './components/Toast';\nexport { default as copy_to_clipboard } from './helpers/copy_to_clipboard';\n// Export your components here\nexport const Example = () => {\n  return <div>Example Component</div>;\n}; "]}